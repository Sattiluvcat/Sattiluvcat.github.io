[{"content":" 简介 NoSql 非关系型数据库 No Structured Relational\n特点： 表型 JSON型 图型==非结构化 Redis为键值类型 JSON表==数据无关联 查询方式==非SQL（语法不统一） 事务ACID无法全部满足==BASE 存储==内存 使用场景： 数据结构不固定 对一致性 安全性要求不高 性能要求 Redis 特征： 键值型 key-value 支持多种数据结构 单线程 命令具原子性 低延迟 内存 IO多路复用 编码风格 支持数据持久化 支持主从集群 分片集群（主表\u0026amp;从表） 多语言客户端 redis-cli -h 192.168.211.129 -p 6379 -a 密码\n启动（不安全） systemctl stop redis关闭 连接虚拟机与图形化界面失败=检查防火墙\n基本语法 不区分大小写\n数据结构 value类型 基本类型：String Hash List（可重复） Set SortedSet（排序集合 不可重复） 特殊类型：GEO（地理坐标） BitMap HyperLog 帮助文档 or 命令行 help\n通用命令 用help 命令名查看命令的具体使用方法\nKEYS查看符合模板a**的所有key 慢 DEL删key 会返回删除的个数 EXISTS判断是否存在 EXPIRE设置key的有效期 TTL查看key的剩余有效期 类型\u0026amp;命令 String 分类 类型 数据结构 string 字符串 int 整型 float 浮点数 常见命令 命令 作用 SET 添加/修改键值对 GET 由key得value MSET/MGET 批量操作 INCR 整型key自增1 INCRBY 整型自增指定步长 INCRBYFLOAT 浮点类型自增指定步长 SETNX 添加String键值对 前提key不存在 SETEX 添加String键值对 指定有效期 SETNX==SET key value NX\n返回0表示键值已存在不会添加\n返回1表示不存在已添加 层级结构 key的层级结构：用:隔开\n若值为Java对象 可用JSON形式存储： eg.'{\u0026quot;id\u0026quot;:1, \u0026quot;name\u0026quot;:\u0026quot;Satti\u0026quot;, \u0026quot;age\u0026quot;:20}'单引 Hash类型 无序字典 类HashMap CRUD 增删改查\n相对String类型的JSON字符串 可以将每个字段独立存储 KEY保存键名 VALUE中field保存字段名 value保存值 常见命令 命令 作用 HSET 添加/修改hash类型一对field\u0026amp;value HGET hash类型由key得filed HMSET/HMGET 对一个key批量操作 HGETALL 由key得所有field value HKEYS key中所有field HVALS key中所有value HINCRBY 字段值按指定步长自增 HSETNX 添加field 前提field不存在 List类型 类似LinkedList 但双向链表\n特征：有序 可重复 插入删除快 查询速度一般 常见命令 命令 作用 LPUSH/RPUSH 列表左/右侧插入 LPOP/RPOP 移除左/右侧第一个 LRANGE 返回一段角标范围内的所有元素 BLPOP/BRPOP 没有元素时等待指定的时间 移除时无元素 返回nil 角标 = 序号 从0开始 Set类型 类HashSet==value为null的HashMap\n特征：无序 不可重复 查找快 支持交并差集 常见命令： 命令 作用 SADD 向set添加元素 可多个 SREM 移除指定元素 SCARD 返回元素个数 SISMEMBER 是否有某元素 SMEMBERS 返回所有value 命令 作用 SINTER 求两键交集 SDIFF key1相对于key2不同的值（差集） SUNION 并集 SDIFF中key有先后顺序 SortedSet 类TreeSet（可排序的set） 数据结构不同\n每个元素具有score属性 通过属性排序=SkipList+Hash 特性： 可排序 元素不重复 查询速度快 常见命令：ZADD ZREM ZCARD ZINCRBY ZDIFF ZINTER ZUNION 命令 作用 ZSORE 获取指定元素score ZRANK 获取指定元素排名 ZCOUNT score在某范围内的元素个数 ZRANGE 按score排序得指定排名范围内元素 ZRANGEBYSCORE 指定score范围内 默认升序排序 Z后加REV即为降序 Jedis 开启测试后通过new对象建立连接\njedis=new Jedis(ip,port);\n设置密码\njedis.auth(password)\n选择库\njedis.select(index) SpringDataRedis RedisTemplate工具类 redisTemplate.opsForValue()类似语句调用上述数据类型\n返回值类型如ValueOperations 步骤 ","permalink":"https://Sattiluvcat.github.io/en/posts/java/redis%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/","summary":"\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003ch3 id=\"nosql\"\u003eNoSql\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e非关系型数据库 No Structured Relational\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e特点：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e表型 JSON型 图型==非结构化\n\u003cul\u003e\n\u003cli\u003eRedis为键值类型\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eJSON表==数据无关联\u003c/li\u003e\n\u003cli\u003e查询方式==非SQL（语法不统一）\u003c/li\u003e\n\u003cli\u003e事务ACID无法全部满足==BASE\u003c/li\u003e\n\u003cli\u003e存储==内存\u003c/li\u003e\n\u003cli\u003e使用场景：\n\u003cul\u003e\n\u003cli\u003e数据结构不固定\u003c/li\u003e\n\u003cli\u003e对一致性 安全性要求不高\u003c/li\u003e\n\u003cli\u003e性能要求\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"redis\"\u003eRedis\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e特征：\n\u003cul\u003e\n\u003cli\u003e键值型 key-\u003c!-- raw HTML omitted --\u003evalue\u003c!-- raw HTML omitted --\u003e 支持多种数据结构\u003c/li\u003e\n\u003cli\u003e单线程 命令具原子性\u003c/li\u003e\n\u003cli\u003e低延迟\n\u003cul\u003e\n\u003cli\u003e内存\u003c/li\u003e\n\u003cli\u003eIO多路复用\u003c/li\u003e\n\u003cli\u003e编码风格\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e支持数据持久化\u003c/li\u003e\n\u003cli\u003e支持主从集群 分片集群（主表\u0026amp;从表）\u003c/li\u003e\n\u003cli\u003e多语言客户端\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eredis-cli -h 192.168.211.129 -p 6379 -a 密码\u003c/code\u003e\u003cbr\u003e\n启动（不安全）\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esystemctl stop redis\u003c/code\u003e关闭\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e连接虚拟机与图形化界面失败=检查防火墙\u003c/p\u003e","title":"Redis_base"},{"content":" 基本概念 RDBMS 关系型数据库 based on关系模型，多张二维表相互连接 sql操作分类 分类 全称 说明 DDL Data Definition Language 定义数据库、表、字段等 DML Manipulation 对表中数据进行增删改 DQL Query 查询表的记录 DCL Control 创建库用户 控制权限 启动与停止 net start mysql80 \u0026amp; net stop mysql80\nMySql 开机自启，在cmd中可手动停止 mysql -u root -p\n-u 提示用户为 root，-p 提示将输入密码 SQL 基本 以分号结尾，行数不论，空格与缩进不论 不区分大小写，关键字最好大写 \u0026ndash; 或 # 注释内容 多行注释 /* 内容 */ DDL DDL数据库操作 SHOW DATABASES;\n查询所有数据库 SELECT DATABASE();\n查询当前（是在哪个）数据库 创建数据库（括号内容可以不加 采用默认规则） CREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排序规则]; charset utf8mb4 设定为容纳4个字节的utf8 在DataGrip中可以使用SCHEMA替代DATABASE DROP DATABASE [IF EXISTS] 数据库名;\n删除数据库 USE 数据库名;\n使用数据库 DDL表操作 查询 SHOW TABLES;\n查询当前数据库所有表 DESC 表名 查询表结构 SHOW CREATE TABLE 表名 查询指定表的建表语句 创建 CREATE TABLE 表名( 字段1 字段1类型[COMMENT '中文'], 字段2 字段2类型[COMMENT '……'], …… 字段3 字段3类型[COMMENT '……'] )[COMMENT '……']; 字段1 是表头名称，如name 字段1类型： 数值类型 tinyint,smallint,mediumint,int-4字节,bigint,float,double tinyint unsigned表示无符号 即正数范围 可指定double(m,n)，m表示最长位数，n表示小数点后最长位数 字符串 char(指定长度),varchar(指定长度), char为定长字符串，varchar变长(会计算所需空间是否需要变化) 日期 date,time,datetime,year,timestamp(截至2038年) 修改 ALTER TABLE 表名 ADD 字段名 字段类型 [COMMENT 注释] [约束]; 增加字段 ALTER TABLE 表名 MODIFY 字段名 新字段类型 [COMMENT 注释]; 修改字段类型 ALTER TABLE 表名 CHANGE 旧字段名 新字段名 新字段类型 [COMMENT 注释]; 修改字段名\u0026amp;字段类型 ALTER TABLE 表名 RENAME TO 新表名 修改表名 删除 ALTER TABLE 表名 DROP 字段名; 删除字段 DROP TABLE [IF EXISTS] 表名; 删除表 TRUNCATE TABLE 表名; 删除并重新创建该表 DataGrip中字段翻译为列\nDML 添加数据 INSERT INTO 表名(字段名1,字段名2,…) VALUES (值1,值2,…); 指定字段添加数据 INSERT INTO 表名 VALUES (值1,值2,…); 全部字段添加数据 此处括号为分隔符号，不可省略，[]表示可以忽略 Sql 以某数据库为原点，若需修改某表，在指令中需指明该表名 字符串与时间类型用 '…' 表示 修改删除 UPDATE 表名 SET 字段名1=值1,字段名2=值2,…[WHERE 条件]; 条件可以写为 id=1 等 DELETE FROM 表名 [WHERE 条件] 不能删除某个对象中特定字段的值（只能删除行） 没有被物理删除 被标记为删除使其空间可被♻ DQL 用*表示显示所有信息，放在其它特殊检索内容前\n基本查询 SELECT 字段1，字段2，… FROM 表名; SELECT * FROM 表名 查询多个字段 SELECT 字段1 [AS 别名1],字段2 [AS 别名2],… FROM 表名; 设置别名(显示在搜索结果的表头) SELECT DISTINCT 字段列表 FROM 表名; 显示查询到的非重复结果 条件查询 SELECT 字段列表 FROM 表名 WHERE 条件列表 条件类型： 比较运算 \u0026gt;,\u0026lt;,\u0026gt;=,\u0026lt;=,\u0026lt;\u0026gt;或!=表示不等于 所有数据类型适用（包括日期） BETWEEN … AND … 含最大最小值的范围 前小后大 数据有先后顺序 IN(…) 列表中的值 LIKE 占位符 模糊匹配 _表示单字符 %表示任意个字符 IS NULL 或 IS NOT NULL 逻辑运算 AND 或 \u0026amp;\u0026amp; OR 或 || NOT 或 ! 聚合函数\u0026amp;分组查询 SELECT 聚合函数(字段列表) FROM 表名;\n常见聚合函数： 函数 功能 count 统计数量 max 最大 min 最小 avg 平均 sum 求和 SELECT 字段列表 FROM 表名 [WHERE 条件] GROUP BY 分组字段名 [HAVING 分组后过滤条件];\n“字段列表”可以写聚合函数\u0026amp;搜索的字段名（可显示表头） 执行顺序：WHERE\u0026gt;聚合函数\u0026gt;HAVING 聚合函数(某) 别名 起别名方法 聚合函数多半可以直接写为 SUM(\\*) 排序查询 SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1,字段2 排序方式2;\n排序方式： ASC 升序(默认) DESC 降序 字段1，字段2有先后顺序 分页查询 SELECT 字段列表 FROM 表名 LIMIT 起始索引,查询记录数;\n起始索引从0开始，为查询页的起始id\n第一页可以写为 LIMIT 查询记录数 顺序 编写顺序： SELECT$\\rightarrow$FROM$\\rightarrow$WHERE$\\rightarrow$GROUP BY$\\rightarrow$HAVING$\\rightarrow$ORDER BY$\\rightarrow$LIMIT DCL 管理用户 USE mysql SELECT * FROM user 查询用户 CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码'; 创建用户 主机名为 % 表示可在任意主机访问 ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码'; 修改密码 DROP USER '用户名'@'主机名'; 删除用户 权限控制 常用权限类型： 权限 说明 ALL(PRIVILEGES) 所有权限 SELECT 查询 INSERT 插入 UPDATE 修改 DELETE 删除 ALTER 修改表 DROP 删除库/表/视图 CREATE 创建库/表 SHOW GRANTS FOR '用户名'@'主机名'; 查询权限 GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名'; 授予权限 权限列表写 ALL 作通配 REVOKE 权限列表 ON 数据库名.表名FROM '用户名'@'主机名'; 撤销权限 数据库、表用\\*作通配 函数 使用 SELECT 函数 进行函数试验\n字符串函数 常用函数：\n函数 功能 CONCAT(S1,S2,…,Sn) 拼接字符串 LOWER(str) 全小写 UPPER(str) 全大写 LPAD(str,n,pad) pad从左填充str到n长度 RPAD(str,n,pad) pad从右填充str到n长度 TRIM(str) 去头尾空格 SUBSTRING(str,start,len) 返回str从start处起的len个字符 字符串从1开始 非0 主要结合前文语法进行应用 数值函数 常见函数：\n函数 功能 CEIL(x) 向上取整 FLOOR(x) 向下取整 MOD(x,y) x/y的模 RAND() 0~1内随机数 ROUND(x,y) x四舍五入 y位小数 日期函数 常见函数：\n函数 功能 CURDATE() 当前日期 CURTIME() 当前时间 NOW() 当前日期与时间 YEAR(date) 获得date的年份 MONTH(date) date的月份 DAY(date) date的日 DATE_ADD(date,INTERVAL expr type) date加上时间间隔expr后的时间 DATEDIFF(date1,date2) date1到date2的天数 DATE_ADD 中 expr 可为数字 type可为 DAY 流程控制函数 常用函数：\n函数 功能 IF(v,t,f) v为true返回t 否之为f IFNULL(value1,value2) v1不为空则返回v1 否之为v2 CASE WHEN [val1] THEN [res1] … ELSE [default] END v1真则返回res1 否之为d CASE [expr] WHEN [val1] THEN [res1] … ELSE [default] END expr等于v1返回res1 否之为d val1处不能并列多个val 用此类函数做筛选不用加where，格式为：==SELECT \\*,(CASE …) AS '别名' FROM 表名== 约束 约束概述 目的：保证数据库中数据的正确有效与完整\n约束分类 约束 描述 关键字 非空约束 该字段数据不为null NOT NULL 唯一约束 该字段所有数据不重复 UNIQUE 主键约束 一行数据的唯一标识 非空且唯一 PRIMARY KEY 默认约束 未指定则采用默认值 DEFAULT 某 检查约束 保证字段满足某条件 CHECK id int PRIMARY KEY AUTO_INCREMENT主键且自动增长(多个约束用空格隔开) 作用于表中字段 创建/修改表时添加 一般把序号设为主键 外键约束 让两表数据建立连接 保证数据完整一致\n具有外键的表=子表 被关联的表=亲表\n格式：\n创建时添加 [CONSTRAINT] [外键名] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名) 修改时添加 ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名) 外键名是给外键自定义的新名字 注意数据类型需完全相同 ALTER TABLE 表名 DROP FOREIGN KEY 外键名称; 删除外键\n[ON UPDATE 模式 ON DELETE 模式] 在添加语句后指定删除/更新模式\n模式 说明 NO ACTION 有外键则不允许更新 RESTRICT 同上 CASCADE 亲子表同时更新 SET NULL 亲表删除 子表设null SET DEFAULT 子表设为默认(Innodb不支持) 多表查询 多表关系 一对多：建立外键连接 eg.员工\u0026amp;部门 多对多：建立第三表 至少包含两外键 分别关联两方主键 eg.学生\u0026amp;课程 一对一：任意一方加外键 并设置为UNIQUE 多用于单表拆分 基础字段在一表 详情字段在另一表 UNIQUE 在定义id的时候添加 eg.用户\u0026amp;用户详情 多表查询概述 并列多表时需要消除无效的笛卡尔积情况(指A*B) 分类： flowchart LR; test((连接查询)) test--\u0026gt;内连接 test--\u0026gt;外连接 test--\u0026gt;自连接 多表查询--\u0026gt;test 多表查询--\u0026gt;子查询 外连接--\u0026gt;左外连接 外连接--\u0026gt;右外连接 内连接 返回A B表的交集\nSELECT 字段列表 FROM 表1,表2 WHERE 条件 …; 隐式内连接 条件类似employee.dept_id=dept\\.id SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 连接条件 …; 显式内连接 外连接 SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件 …; 左外连接 查询左表与交集部分的数据 SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件 …; 左外连接 右表\u0026amp;交集 自连接 SELECT 字段列表 FROM 表1 别名1 JOIN 表1 别名2 ON 条件 …; 可内连接也可外连接 联合查询 SELECT 字段列表 FROM 表1 … UNION [ALL] SELECT 字段列表 FROM 表2 …; 有ALL结果直接合并 无ALL去重 字段列表与类型相同 子查询（嵌套查询） 外部可以是INSERT/UPDATE/DELETE/SELECT 根据子查询结果的不同分类： 名称 意义 标量子查询 结果为单个值 列子查询 结果为一列 行子查询 为一行 表子查询 多行多列 可在WHERE/FROM/SELECT之后进行 列子查询 返回一列结果 常用操作符： 操作符 用途 ==IN== 集合范围之内 多选一 NOT IN 不在集合范围内 ANY 任意一个满足 SOME 同ANY ALL 所有值都满足 行子查询 常用操作符 =、\u0026lt;\u0026gt;、IN、NOT IN 可以用 (1200,1)=(salary,manager) 表示一一对应 表子查询 常用操作符 IN 事务 操作 简介：一组操作的集合 整体提交 自动开始 SELECT @@AUTOCOMMIT; 开始事务(自动提交) SELECT @@AUTOCOMMIT=0; …… COMMIT; 手动提交事务 ROLLBACK; 事务回滚 手动开始 START TRANSACTION; 开启事务 COMMIT; 提交事务 ROLLBACK; 回滚事务 特性 原子性 不可分割的最小操作单元 一致性 事务完成时所有数据保持一致状态 隔离性 数据库的隔离机制，事务进行不受外部并发操作影响 持久性 提交或回滚后，数据的改变是永久的 ==ACID模型== 并发事务问题 脏读 一个事务读到另一个事务未提交的数据 不可重复读 先后读取同一记录但数据不同 幻读 按条件查询数据，无对应数据行，但插入数据时发现该行数据已存在 事务隔离级别 分类： 隔离级别 脏读 不可重复读 幻读 READ UNCOMMITTED ✔ ✔ ✔ READ COMMITTED ✖ ✔ ✔ REPEATABLE READ(默认) ✖ ✖ ✔ SERIALIZABLE ✖ ✖ ✖ ORACLE默认READ COMMITTED 性能递减 安全性递增 SELECT @@TRANSACTION_ISOLATION; 查看事务隔离级别 SET [SESSION或GLOBAL] TRANSACTION ISOLATION LEVEL {隔离级别}; 设定隔离级别 SESSION为当前连接 GLOBAL为全局，不包含当前连接 ","permalink":"https://Sattiluvcat.github.io/en/posts/java/mysql_base/","summary":"\u003cp\u003e \u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch2 id=\"基本概念\"\u003e基本概念\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cem\u003eRDBMS\u003c/em\u003e 关系型数据库\nbased on关系模型，多张二维表\u003cstrong\u003e相互连接\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003esql操作分类\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e分类\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e全称\u003c/th\u003e\n          \u003cth style=\"text-align: center\"\u003e说明\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDDL\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003eData Definition Language\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e定义数据库、表、字段等\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDML\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003eManipulation\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e对表中数据进行增删改\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDQL\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003eQuery\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e查询表的记录\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDCL\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003eControl\u003c/td\u003e\n          \u003ctd style=\"text-align: center\"\u003e创建库用户 控制权限\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"启动与停止\"\u003e启动与停止\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003enet start mysql80\u003c/code\u003e \u0026amp; \u003ccode\u003enet stop mysql80\u003c/code\u003e\u003cbr\u003e\nMySql 开机自启，在cmd中可手动停止\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emysql -u root -p\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003e-u\u003c/code\u003e 提示用户为 root，\u003ccode\u003e-p\u003c/code\u003e 提示将输入密码\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"sql\"\u003eSQL\u003c/h2\u003e\n\u003ch3 id=\"基本\"\u003e基本\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e以分号结尾，行数不论，空格与缩进不论\u003c/li\u003e\n\u003cli\u003e不区分大小写，关键字最好大写\u003c/li\u003e\n\u003cli\u003e\u0026ndash; 或 # 注释内容\n多行注释 /* 内容 */\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"ddl\"\u003eDDL\u003c/h3\u003e\n\u003ch4 id=\"ddl数据库操作\"\u003eDDL数据库操作\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eSHOW DATABASES;\u003c/code\u003e\u003cbr\u003e\n查询所有数据库\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSELECT DATABASE();\u003c/code\u003e\u003cbr\u003e\n查询当前（是在哪个）数据库\u003c/li\u003e\n\u003cli\u003e创建数据库（括号内容可以不加 采用默认规则）\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eCREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排序规则];\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echarset utf8mb4\u003c/code\u003e 设定为容纳4个字节的utf8\u003c/li\u003e\n\u003cli\u003e在\u003c!-- raw HTML omitted --\u003eDataGrip\u003c!-- raw HTML omitted --\u003e中可以使用\u003cem\u003eSCHEMA\u003c/em\u003e替代\u003cem\u003eDATABASE\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003e\u003ccode\u003eDROP DATABASE [IF EXISTS] 数据库名;\u003c/code\u003e\u003cbr\u003e\n删除数据库\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUSE 数据库名;\u003c/code\u003e\u003cbr\u003e\n使用数据库\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"ddl表操作\"\u003eDDL表操作\u003c/h4\u003e\n\u003ch5 id=\"查询\"\u003e查询\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eSHOW TABLES;\u003c/code\u003e\u003cbr\u003e\n查询当前数据库所有表\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDESC 表名\u003c/code\u003e\n查询表结构\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSHOW CREATE TABLE 表名\u003c/code\u003e\n查询指定表的建表语句\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"创建\"\u003e创建\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eCREATE TABLE 表名( 字段1 字段1类型[COMMENT '中文'], 字段2 字段2类型[COMMENT '……'], …… 字段3 字段3类型[COMMENT '……'] )[COMMENT '……'];\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e字段1 是表头名称，如name\u003c/li\u003e\n\u003cli\u003e字段1类型：\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e数值类型\u003c/strong\u003e\ntinyint,smallint,mediumint,int-4字节,bigint,float,double\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etinyint unsigned\u003c/code\u003e表示无符号 即\u003cstrong\u003e正数范围\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e可指定\u003ccode\u003edouble(m,n)\u003c/code\u003e，m表示最长位数，n表示小数点后最长位数\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e字符串\u003c/strong\u003e\nchar(指定长度),varchar(指定长度),\n\u003cul\u003e\n\u003cli\u003echar为定长字符串，varchar变长(会计算所需空间是否需要变化)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e日期\u003c/strong\u003e\ndate,time,datetime,year,timestamp(截至2038年)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"修改\"\u003e修改\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eALTER TABLE 表名 ADD 字段名 字段类型 [COMMENT 注释] [约束];\u003c/code\u003e\n增加字段\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eALTER TABLE 表名 MODIFY 字段名 新字段类型 [COMMENT 注释];\u003c/code\u003e\n修改字段类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eALTER TABLE 表名 CHANGE 旧字段名 新字段名 新字段类型 [COMMENT 注释];\u003c/code\u003e\n修改字段名\u0026amp;字段类型\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eALTER TABLE 表名 RENAME TO 新表名\u003c/code\u003e\n修改表名\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"删除\"\u003e删除\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eALTER TABLE 表名 DROP 字段名;\u003c/code\u003e\n删除字段\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDROP TABLE [IF EXISTS] 表名;\u003c/code\u003e\n删除表\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTRUNCATE TABLE 表名;\u003c/code\u003e\n删除并重新创建该表\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDataGrip中字段翻译为列\u003c/p\u003e","title":"MySql基础"},{"content":" 我叫Lulu 是一只矮脚小猫😼\n我生活在韩国\n和 一个人类 小声告诉你 她叫 Claire 喔\n还有 十只猫猫 住在一起\n虽然我很可爱 可是矮脚猫有基因缺陷 请谨慎养宠!\n这就是我的世界 喜欢我的话就往下看看吧🥰\n我的人型抱枕🥰 Secret !\nlulu不是不喜欢 Claire 是她的食物和玩具太有吸引力了\nClaire 在 Youtube\n和 Instagram\n上发布我们的动态\n答应我 如果喜欢我们的话要去关注她\n认准 Claire _luvcat频道不迷路😋 Claire 是我们的管家！\n肾衰的TT姐姐 跟我一样折耳的ChuChu\nClaire 都带我们治病\n喜欢她🥰\n舔狗lulu😗 只是喜欢的真情流露\n盗窃小分队😋\n喜欢DD\nMoMo会长😗\n一口吃掉\n盗窃小分队Ⅱ\n也喜欢CoCo\n唯一的Queen——TT姐姐🤩\n勇敢lulu 不怕困难😼 lulu （和弟弟TOTO,DODO）是最 勇猛 的小猫😼\n因为基因 lulu可以 站 起来\nlulu在看着你🥺\nClaire 在吃什么 可以给lulu尝一口吗\nlulu爱睡觉 lulu一天到晚睡觉\n属于折耳猫的病痛 短粗的尾巴 畸形的耳朵\n是 折耳 基因的影响😢\n软骨发育不全会带来 痛苦\n所以请不要养折耳猫！\nTo Be Continued\n","permalink":"https://Sattiluvcat.github.io/en/lulu/","summary":"lulu","title":"Lulu的一切"},{"content":" 一直很想在互联网上拥有属于自己的空间😸\n记录一些关于自己和最喜欢的小猫——Lulu！的故事\n🥰🥰\n喜欢电影和文字 如有同好请通过博文评论区跟我交流🎃🎉\n","permalink":"https://Sattiluvcat.github.io/en/about/","summary":"about","title":"关于 Satti"}]